# pacman #######################################################################
pacsearch() {
  echo -e "$(pacman -Ss $@ | sed \
  -e 's#core/.*#\\e[0;31m&\\e[m#' \
  -e 's#extra/.*#\\e[0;32m&\\e[m#' \
  -e 's#community/.*#\\e[0;33m&\\e[m#' \
  -e 's#^.*/.* [0-9].*#\\e[0;35m&\\e[m#' )"
}

paclocalsearch() {
  echo -e "$(pacman -Qs $@ | sed \
  -e 's#core/.*#\\e[0;31m&\\e[m#' \
  -e 's#extra/.*#\\e[0;32m&\\e[m#' \
  -e 's#community/.*#\\e[0;33m&\\e[m#' \
  -e 's#^.*/.* [0-9].*#\\e[0;35m&\\e[m#' )"
}

# misc #########################################################################
# Extract various types of compressed files
# Usage: extract <compressed file>
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1    ;;
      *.tar.gz)    tar xvzf $1    ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       rar x $1       ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xvf $1     ;;
      *.tbz2)      tar xvjf $1    ;;
      *.tgz)       tar xvzf $1    ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)           echo "Don't know how to extract '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file."
  fi
}

# Makes directory then moves into it
# Usage: mkcdr <directory>
function mkcdr {
  mkdir -p -v $1
  cd $1
}

# Shows terminal colors
function showcolors() {
  T='gYw'

  echo -e "\n            \
     40m     41m     42m     43m\
     44m     45m     46m     47m";

  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
  '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
  '  36m' '1;36m' '  37m' '1;37m';
  do FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
    do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
    done
    echo;
  done
  echo
}

# Creates an archive from given directory
# Usage: mkt{ar,gz,bz} <directory>
mktar() { tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
mktgz() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mktbz() { tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }

# Search the vim reference manual for a keyword
# Usage: :h <keyword>
function :h() {  vim --cmd ":silent help $@" --cmd "only"; }

# Recursively change ownership to $USER:$USER
# Usage:  mkmine [filename | dirname]
function mkmine() { sudo chown -R ${USER} ${1:-.}; }

# A simple reminder
# Usage: remindme <time> <text>
# Example: remindme 10m omg, the pizza
function remindme() {
  delay=$1
  shift
  sleep $delay ; zenity --info --text "$*" > /dev/null &
}

# Shows available and running services
services() {
  echo "All daemons"
  ls /etc/rc.d/
  echo "\nRunning daemons"
  ls /var/run/daemons
}

# Recursively fix directory and file permissions on given directory
# Usage: fix <directory>
fix() {
  if [ -d $1 ]; then
    find $1 -type d -exec chmod 755 {} \;
    find $1 -type f -exec chmod 644 {} \;
  else
    echo "$1 is not a directory."
  fi
}

# Google definitions
# Usage: goo <word>
goo() {
  local LNG=$(echo $LANG | cut -d '_' -f 1)
  local CHARSET=$(echo $LANG | cut -d '.' -f 2)
  lynx -accept_all_cookies -dump -hiddenlinks=ignore -nonumbers -assume_charset="$CHARSET" -display_charset="$CHARSET" "http://www.google.com/search?hl=${LNG}&q=define%3A+${1}&btnG=Google+Search" | grep -m 5 -C 2 -A 5 -w "*" > /tmp/deleteme
  if [ ! -s /tmp/deleteme ]; then
    echo "Sorry, google doesn't know this one..."
  else
    cat /tmp/deleteme | grep -v Search
    echo ""
  fi
  rm -f /tmp/deleteme
}

# Send public key to remote server
# Usage: sendkey <user@remotehost>
sendkey() {
  if [ $# -ne 1 ]; then
    ssh $1 'cat >> ~/.ssh/authorized_keys' < ~/.ssh/id_dsa.pub
  fi
}

# Start, stop, restart, reload - simple service management
# USAGE: {start,stop,restart,reload} <service>
start() {
  for arg in $*; do
    sudo /etc/rc.d/$arg start
  done
}

stop() {
  for arg in $*; do
    sudo /etc/rc.d/$arg stop
  done
}

restart() {
  for arg in $*; do
    sudo /etc/rc.d/$arg restart
  done
}

reload() {
  for arg in $*; do
    sudo /etc/rc.d/$arg reload
  done
}

# Goes to the directory where the file/directory is located
# Usage: cdf <file | directory>
cdf() { cd "$(dirname "$(locate -b "\\$1" | head -n 1)")" ; }

# Find file names with given content
# Usage: findc <directory> <content>
findc() {
  if [ -n "$2" ]; then
    find "$1" -type f -exec grep -qI "$2" {} \; -print
  else
    find "./" -type f -exec grep -qI "$1" {} \; -print
  fi
}

# Shows the current machine's IP address
# Usage: myip
myip() {
  echo `wget www.whatismyip.com/automation/n09230945.asp -O - -q`
}

# Redirects video output to the VGA display
vga () {
  {
    killall conky pypanel &
    xrandr --newmode "1280x1024"  109.00  1280 1368 1496 1712  1024 1027 1034 1063 -hsync +vsync &
    xrandr --addmode VGA1 "1280x1024" &
    xrandr --output VGA1 --mode "1280x1024" --output LVDS1 --off &
    [[ -s "$HOME/.wallpaper" ]] && feh --bg-scale $HOME/.wallpaper &
    pypanel &
    conky &
  } &> /dev/null &
}

# Redirects video output to the LVDS display
lvds () {
  {
    killall conky pypanel &
    xrandr --output LVDS1 --mode "1280x800" &
    xrandr --output VGA1 --off &
    [[ -s "$HOME/.wallpaper" ]] && feh --bg-scale $HOME/.wallpaper &
    pypanel &
    conky &
  } &> /dev/null &
}
